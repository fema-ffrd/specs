{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About FFRD","text":"<p> FEMA\u2019s Future of Flood Risk Data (FFRD) initiative aims to provide a more comprehensive picture of the country's flood hazards and risks. It focuses on delivering efficient, accurate, and consistent flood risk with uncertainty nationwide. This set of documents is intended to improve collaboration among stakeholders and document the development of tools that can be used within the FFRD initiative. By utilizing standardized data formats, detailed specifications, structured schemas, and reference implementations, the tools developed will serve as a foundation for studies and analyses that further enhance flood risk assessment and management. These efforts will aid in ensuring better preparedness and resilience across communities, ultimately supporting informed decision-making and policy development.</p>"},{"location":"#more-information","title":"More information","text":"<ul> <li>The Future of Flood Risk Data (FFRD)</li> <li>FEMA's Future of Flood Risk Data Initiative (US Army Corps of Engineers)</li> <li>CTP Webinar: FEMA's Future of Flood Risk Data Initiative (Association of State Floodplain Managers)</li> </ul>"},{"location":"references/","title":"References","text":""},{"location":"references/#hydrologic-hydraulic-models","title":"Hydrologic &amp; Hydraulic Models","text":"<ul> <li>HEC-RAS Documentation</li> <li>HEC-HMS Documentation</li> <li>HEC-ResSim Documentation</li> </ul>"},{"location":"scope/","title":"Purpose and Scope","text":"<p>This collection of documents and resources serves a dual purpose in supporting FEMA\u2019s Future of Flood Risk Data (FFRD) initiative. Firstly, it aims to enhance collaboration among various stakeholders, including governmental agencies, researchers, and community planners, by providing a shared understanding of flood risk data methodologies and tools. Secondly, it documents the development and application of essential tools that underpin the FFRD initiative, facilitating the creation of innovative solutions for flood risk management.</p>"},{"location":"scope/#purpose","title":"Purpose","text":"<p>The primary purpose of these documents is to establish a standardized framework for the development and application of flood risk assessment tools. By articulating clear guidelines and methodologies, these resources ensure that all stakeholders have access to consistent and reliable information. This consistency supports effective communication and decision-making processes, enabling stakeholders to develop strategies that enhance community resilience to flood risks.</p>"},{"location":"scope/#scope","title":"Scope","text":"<p>The scope of these documents encompasses several key components:</p> <ul> <li> <p>Standards and Specifications: These documents outline the standards and specifications that guide the development of tools within the FFRD initiative. They ensure that all tools adhere to agreed-upon norms, promoting interoperability and quality across different systems and applications.</p> </li> <li> <p>Reference Implementations: These provide practical examples and benchmarks for tool development, illustrating how standards and specifications can be applied in real-world contexts. They serve as a foundation for further studies and analyses within the FFRD initiative.</p> </li> <li> <p>Schemas: By defining data structures and constraints, schemas facilitate accurate data exchange and integration. This ensures that flood risk data is both consistent and reliable, supporting comprehensive risk assessments.</p> </li> </ul> <p>Overall, these documents and resources lay the groundwork for the development of tools and methodologies that can be used not only within the FFRD initiative but also as a foundation for broader studies and analyses in flood risk assessment and management. They support informed decision-making and policy development, ultimately enhancing the nation\u2019s preparedness and resilience to flood hazards.</p>"},{"location":"terms/","title":"Key terms, definitions, and abbreviations","text":""},{"location":"terms/#definitions","title":"Definitions","text":""},{"location":"terms/#standards","title":"Standards","text":"<p>Definition: A standard is a set of agreed-upon guidelines or norms established by an authoritative body or organization. Standards are used to ensure compatibility, interoperability, and quality across different systems and products.</p> <p>Purpose: The main purpose of a standard is to provide a common framework or set of rules that can be universally applied across different projects, organizations, or industries. It helps ensure that products or systems can work together seamlessly.</p> <p>Scope: Standards are generally broader in scope than specifications and may cover best practices, protocols, or methods that are widely accepted and adopted across the industry.</p>"},{"location":"terms/#specifications","title":"Specifications","text":"<p>Definition: A specification is a detailed, precise, and formal description of a system's behavior, features, or interfaces. It serves as a blueprint for designing, building, and testing a software component or system.</p> <p>Purpose: The main purpose of a specification is to communicate the specific requirements and functionalities that a software system or component must fulfill. It acts as a guide for developers and engineers during the implementation phase.</p> <p>Scope: Specifications can be very detailed and may include data formats, algorithms, interfaces, protocols, and other technical elements required to implement a system or component.</p>"},{"location":"terms/#schemas","title":"Schemas","text":"<p>Definition: A schema is a structured framework or blueprint that defines the organization, structure, and constraints of data within a database or system. Schemas ensure consistency and validate data inputs and outputs across systems.</p> <p>Purpose: The main purpose of a schema is to provide a clear and unambiguous definition of data structures, enabling seamless data interchange and ensuring data integrity and validation.</p> <p>Scope: Schemas are often used in conjunction with both standards and specifications. They define the format and structure of data, allowing for consistent data exchange and storage across different systems and applications.</p>"},{"location":"terms/#reference-implementations","title":"Reference Implementations","text":"<p>Definition: A reference implementation is a sample implementation of a standard or specification, provided to demonstrate how it can be applied in practice. It serves as a concrete example to guide developers in their own implementations.</p> <p>Purpose: The main purpose of a reference implementation is to illustrate the practical application of a standard or specification, offering insights into potential challenges and solutions. It can also serve as a benchmark for testing and validation.</p> <p>Scope: Reference implementations are typically provided alongside standards or specifications to help developers understand and apply them correctly. They ensure that different implementations are consistent with the intended design and functionality.</p>"},{"location":"terms/#terms-and-abbreviations","title":"Terms and Abbreviations","text":"<p>Stochastic Storm Transposition (SST): a method used in hydrology to estimate flood risk and precipitation patterns by virtually expanding the historical record of storm events. SST involves randomly shifting observed storms from their original locations to create new, hypothetical storm scenarios based on realistic data.</p> <p>Study Area: The watershed being evaluated for flood hazard and flood risk using SST.</p> <p>Transposition Domain: A wider area encompassing the watershed from which historical observed storms are selected.</p> <p>Storm Catalog: The collection of historical observed storms from a transposition domain which are used for SST.</p> <p>Event:</p> <p>Block:</p> <p>Realization:</p>"},{"location":"draft/base_image/base_image/","title":"Base Image","text":""},{"location":"draft/base_image/base_image/#standard","title":"\ud83d\udcd0 Standard","text":""},{"location":"draft/base_image/base_image/#purpose","title":"Purpose","text":"<p>To ensure consistent validation of configuration files and seamless interoperability with Object Stores (starting with Amazon S3) for file upload and download operations.</p>"},{"location":"draft/base_image/base_image/#scope","title":"Scope","text":"<p>This standard applies to all systems and projects that require:</p> <ul> <li>Validation of configuration files against a defined schema.</li> <li>Uploading and downloading files to/from Amazon S3.</li> <li>Use of Python-based reference implementations for these operations.</li> </ul>"},{"location":"draft/base_image/base_image/#guidelines","title":"Guidelines","text":"<ol> <li>Schema Validation: All configuration files must be validated against a JSON schema before processing.</li> <li>S3 Operations: File uploads and downloads must use secure, authenticated connections to Amazon S3.</li> <li>Containerization: Reference implementations should be provided as container images for reproducibility.</li> <li>Interoperability: All tools must accept configuration files and schemas in standard JSON format.</li> <li>Documentation: Each implementation must include clear usage instructions and example commands.</li> </ol>"},{"location":"draft/base_image/base_image/#best-practices","title":"Best Practices","text":"<ul> <li>Use environment variables for sensitive credentials.</li> <li>Log all validation and S3 operations for auditability.</li> <li>Follow semantic versioning for schema and implementation updates.</li> </ul>"},{"location":"draft/base_image/base_image/#specification","title":"\ud83d\udcdd Specification","text":""},{"location":"draft/base_image/base_image/#overview","title":"Overview","text":"<p>This specification describes the requirements for a containerized tool that validates configuration files against a JSON schema and supports uploading/downloading files to/from Amazon S3.</p>"},{"location":"draft/base_image/base_image/#requirements","title":"Requirements","text":""},{"location":"draft/base_image/base_image/#1-schema-validation","title":"1. Schema Validation","text":"<ul> <li>Accept a configuration file and a JSON schema as input.</li> <li>Validate the configuration file using the provided schema.</li> <li>Output validation results (success/failure and errors).</li> </ul>"},{"location":"draft/base_image/base_image/#2-s3-file-operations","title":"2. S3 File Operations","text":"<ul> <li>Download: Retrieve files from a specified S3 bucket/key to a local path.</li> <li>Upload: Send local files to a specified S3 bucket/key.</li> <li>Use AWS credentials from environment variables or configuration files.</li> </ul>"},{"location":"draft/base_image/base_image/#3-containerization","title":"3. Containerization","text":"<ul> <li>Base image: No limitations on what base image or runtime are imposed.</li> <li>Include scripts for validation, upload, and download.</li> <li>Expose scripts as executable commands in the container.</li> </ul>"},{"location":"draft/base_image/base_image/#4-usage","title":"4. Usage","text":"<ul> <li>Entrypoint: Validation script (<code>validate</code>)</li> <li>Additional commands: <code>download</code>, <code>upload</code>, <code>download_from_config</code></li> </ul>"},{"location":"draft/base_image/base_image/#5-dependencies","title":"5. Dependencies","text":"<ul> <li>System package: <code>jq</code></li> </ul>"},{"location":"draft/base_image/base_image/#example-commands","title":"Example Commands","text":"<pre><code>docker run --rm -v $(pwd):/data validate /data/config.json /schemas/base_schema.json\ndocker run --rm upload s3://bucket/key /data/file.txt\ndocker run --rm download s3://bucket/key /data/file.txt\n</code></pre>"},{"location":"draft/base_image/base_image/#schema","title":"\ud83d\uddc3\ufe0f Schema","text":"<p>This page includes the complete configuration schema used by the base image to validate plugin execution parameters.</p> <p>It is provided as a reference for plugin authors and base image reimplementers.</p>"},{"location":"draft/base_image/base_image/#json-schema","title":"\ud83d\udd0d JSON Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://example.com/schemas/base_schema.json\",\n  \"title\": \"Base Configuration Schema\",\n  \"description\": \"Defines the base-level configuration for operations such as downloading, uploading, and validating files from S3.\",\n  \"version\": \"0.1.0\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"operations\": {\n      \"type\": \"array\",\n      \"description\": \"List of operations this configuration enables (e.g. downloading, uploading, and validating).\",\n      \"items\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"download\",\n          \"upload\",\n          \"validate\"\n        ]\n      },\n      \"minItems\": 1\n    },\n    \"s3Downloads\": {\n      \"type\": \"array\",\n      \"title\": \"S3 Download Tasks\",\n      \"description\": \"List of files to download from S3.\",\n      \"items\": {\n        \"type\": \"object\",\n        \"title\": \"S3 Download Specification\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"A human-readable name or ID used for logging or environment variable naming.\",\n            \"minLength\": 1\n          },\n          \"s3Uri\": {\n            \"type\": \"string\",\n            \"description\": \"S3 URI in the format s3://bucket/key from which to download the file.\",\n            \"pattern\": \"^s3://.+/.+\"\n          },\n          \"destinationPath\": {\n            \"type\": \"string\",\n            \"description\": \"Filesystem path where the downloaded file will be stored.\",\n            \"minLength\": 1\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"s3Uri\",\n          \"destinationPath\"\n        ],\n        \"additionalProperties\": false\n      },\n      \"minItems\": 1\n    },\n    \"s3Uploads\": {\n      \"type\": \"array\",\n      \"title\": \"S3 Upload Tasks\",\n      \"description\": \"Optional list of files to upload to S3 after processing.\",\n      \"items\": {\n        \"type\": \"object\",\n        \"title\": \"S3 Upload Specification\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Logical name for the upload task (used for logging or env variable lookup).\",\n            \"minLength\": 1\n          },\n          \"path\": {\n            \"type\": \"string\",\n            \"description\": \"Path to the file on the container filesystem to be uploaded.\",\n            \"minLength\": 1\n          },\n          \"s3Uri\": {\n            \"type\": \"string\",\n            \"description\": \"Destination S3 URI in the format s3://bucket/key.\",\n            \"pattern\": \"^s3://.+/.+\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"path\",\n          \"s3Uri\"\n        ],\n        \"additionalProperties\": false\n      },\n      \"minItems\": 1\n    }\n  },\n  \"required\": [\n    \"operations\"\n  ],\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"draft/base_image/base_image/#notes","title":"\ud83e\uddfe Notes","text":"<ul> <li>The schema is based on JSON Schema Draft 7</li> <li>This file defines the required structure for <code>--config</code> passed to the container</li> <li>Extensions can be added in <code>schema-extension.json</code> and merged during image build</li> </ul> <p>For more information on schema extensions, see the Base Image Specification.</p>"},{"location":"draft/base_image/base_image/#reference","title":"\ud83d\udcda Reference","text":"<p>This reference implementation is provided as a Docker container. It includes Python scripts for validating configuration files and performing S3 uploads/downloads.</p>"},{"location":"draft/base_image/base_image/#container-details","title":"Container Details","text":"<ul> <li>Base Image: <code>python:3.11-slim</code></li> <li>Installed Packages: <code>boto3</code>, <code>python-dotenv</code>, <code>jsonschema</code>, <code>referencing&gt;=0.30.0</code>, <code>jq</code></li> <li>Scripts:</li> <li><code>/usr/local/bin/validate</code>: Validates configuration files against a schema.</li> <li><code>/usr/local/bin/upload</code>: Uploads files to S3.</li> <li><code>/usr/local/bin/download</code>: Downloads files from S3.</li> <li><code>/usr/local/bin/download_from_config</code>: Downloads files as specified in a config.</li> </ul>"},{"location":"draft/base_image/base_image/#usage","title":"Usage","text":""},{"location":"draft/base_image/base_image/#validate-a-configuration-file","title":"Validate a Configuration File","text":"<pre><code>docker run --rm -v $(pwd):/data specs-reference-base /usr/local/bin/validate /data/config.json /schemas/base_schema.json\n</code></pre>"},{"location":"draft/base_image/base_image/#upload-a-file-to-s3","title":"Upload a File to S3","text":"<pre><code>docker run --rm specs-reference-base /usr/local/bin/upload s3://bucket/key /data/file.txt\n</code></pre>"},{"location":"draft/base_image/base_image/#download-a-file-from-s3","title":"Download a File from S3","text":"<pre><code>docker run --rm specs-reference-base /usr/local/bin/download s3://bucket/key /data/file.txt\n</code></pre>"},{"location":"draft/base_image/base_image/#entrypoint","title":"Entrypoint","text":"<p>The default entrypoint is the validation script:</p> <pre><code>ENTRYPOINT [\"/usr/local/bin/validate\"]\n</code></pre>"},{"location":"draft/base_image/base_image/#source-files","title":"Source Files","text":"<ul> <li><code>Dockerfile</code></li> <li><code>validate.py</code></li> <li><code>upload.py</code></li> <li><code>download.py</code></li> <li><code>download_from_config.py</code></li> <li><code>base_schema.json</code></li> </ul> <p>See the Dockerfile for installation and setup details.</p>"},{"location":"draft/base_image/reference/","title":"Reference","text":""},{"location":"draft/base_image/reference/#reference","title":"\ud83d\udcda Reference","text":"<p>This reference implementation is provided as a Docker container. It includes Python scripts for validating configuration files and performing S3 uploads/downloads.</p>"},{"location":"draft/base_image/reference/#container-details","title":"Container Details","text":"<ul> <li>Base Image: <code>python:3.11-slim</code></li> <li>Installed Packages: <code>boto3</code>, <code>python-dotenv</code>, <code>jsonschema</code>, <code>referencing&gt;=0.30.0</code>, <code>jq</code></li> <li>Scripts:</li> <li><code>/usr/local/bin/validate</code>: Validates configuration files against a schema.</li> <li><code>/usr/local/bin/upload</code>: Uploads files to S3.</li> <li><code>/usr/local/bin/download</code>: Downloads files from S3.</li> <li><code>/usr/local/bin/download_from_config</code>: Downloads files as specified in a config.</li> </ul>"},{"location":"draft/base_image/reference/#usage","title":"Usage","text":""},{"location":"draft/base_image/reference/#validate-a-configuration-file","title":"Validate a Configuration File","text":"<pre><code>docker run --rm -v $(pwd):/data specs-reference-base /usr/local/bin/validate /data/config.json /schemas/base_schema.json\n</code></pre>"},{"location":"draft/base_image/reference/#upload-a-file-to-s3","title":"Upload a File to S3","text":"<pre><code>docker run --rm specs-reference-base /usr/local/bin/upload s3://bucket/key /data/file.txt\n</code></pre>"},{"location":"draft/base_image/reference/#download-a-file-from-s3","title":"Download a File from S3","text":"<pre><code>docker run --rm specs-reference-base /usr/local/bin/download s3://bucket/key /data/file.txt\n</code></pre>"},{"location":"draft/base_image/reference/#entrypoint","title":"Entrypoint","text":"<p>The default entrypoint is the validation script:</p> <pre><code>ENTRYPOINT [\"/usr/local/bin/validate\"]\n</code></pre>"},{"location":"draft/base_image/reference/#source-files","title":"Source Files","text":"<ul> <li><code>Dockerfile</code></li> <li><code>validate.py</code></li> <li><code>upload.py</code></li> <li><code>download.py</code></li> <li><code>download_from_config.py</code></li> <li><code>base_schema.json</code></li> </ul> <p>See the Dockerfile for installation and setup details.</p>"},{"location":"draft/base_image/schema/","title":"Schema","text":""},{"location":"draft/base_image/schema/#schema","title":"\ud83d\uddc3\ufe0f Schema","text":"<p>This page includes the complete configuration schema used by the base image to validate plugin execution parameters.</p> <p>It is provided as a reference for plugin authors and base image reimplementers.</p>"},{"location":"draft/base_image/schema/#json-schema","title":"\ud83d\udd0d JSON Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://example.com/schemas/base_schema.json\",\n  \"title\": \"Base Configuration Schema\",\n  \"description\": \"Defines the base-level configuration for operations such as downloading, uploading, and validating files from S3.\",\n  \"version\": \"0.1.0\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"operations\": {\n      \"type\": \"array\",\n      \"description\": \"List of operations this configuration enables (e.g. downloading, uploading, and validating).\",\n      \"items\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"download\",\n          \"upload\",\n          \"validate\"\n        ]\n      },\n      \"minItems\": 1\n    },\n    \"s3Downloads\": {\n      \"type\": \"array\",\n      \"title\": \"S3 Download Tasks\",\n      \"description\": \"List of files to download from S3.\",\n      \"items\": {\n        \"type\": \"object\",\n        \"title\": \"S3 Download Specification\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"A human-readable name or ID used for logging or environment variable naming.\",\n            \"minLength\": 1\n          },\n          \"s3Uri\": {\n            \"type\": \"string\",\n            \"description\": \"S3 URI in the format s3://bucket/key from which to download the file.\",\n            \"pattern\": \"^s3://.+/.+\"\n          },\n          \"destinationPath\": {\n            \"type\": \"string\",\n            \"description\": \"Filesystem path where the downloaded file will be stored.\",\n            \"minLength\": 1\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"s3Uri\",\n          \"destinationPath\"\n        ],\n        \"additionalProperties\": false\n      },\n      \"minItems\": 1\n    },\n    \"s3Uploads\": {\n      \"type\": \"array\",\n      \"title\": \"S3 Upload Tasks\",\n      \"description\": \"Optional list of files to upload to S3 after processing.\",\n      \"items\": {\n        \"type\": \"object\",\n        \"title\": \"S3 Upload Specification\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Logical name for the upload task (used for logging or env variable lookup).\",\n            \"minLength\": 1\n          },\n          \"path\": {\n            \"type\": \"string\",\n            \"description\": \"Path to the file on the container filesystem to be uploaded.\",\n            \"minLength\": 1\n          },\n          \"s3Uri\": {\n            \"type\": \"string\",\n            \"description\": \"Destination S3 URI in the format s3://bucket/key.\",\n            \"pattern\": \"^s3://.+/.+\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"path\",\n          \"s3Uri\"\n        ],\n        \"additionalProperties\": false\n      },\n      \"minItems\": 1\n    }\n  },\n  \"required\": [\n    \"operations\"\n  ],\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"draft/base_image/schema/#notes","title":"\ud83e\uddfe Notes","text":"<ul> <li>The schema is based on JSON Schema Draft 7</li> <li>This file defines the required structure for <code>--config</code> passed to the container</li> <li>Extensions can be added in <code>schema-extension.json</code> and merged during image build</li> </ul> <p>For more information on schema extensions, see the Base Image Specification.</p>"},{"location":"draft/base_image/spec/","title":"Spec","text":""},{"location":"draft/base_image/spec/#specification","title":"\ud83d\udcdd Specification","text":""},{"location":"draft/base_image/spec/#overview","title":"Overview","text":"<p>This specification describes the requirements for a containerized tool that validates configuration files against a JSON schema and supports uploading/downloading files to/from Amazon S3.</p>"},{"location":"draft/base_image/spec/#requirements","title":"Requirements","text":""},{"location":"draft/base_image/spec/#1-schema-validation","title":"1. Schema Validation","text":"<ul> <li>Accept a configuration file and a JSON schema as input.</li> <li>Validate the configuration file using the provided schema.</li> <li>Output validation results (success/failure and errors).</li> </ul>"},{"location":"draft/base_image/spec/#2-s3-file-operations","title":"2. S3 File Operations","text":"<ul> <li>Download: Retrieve files from a specified S3 bucket/key to a local path.</li> <li>Upload: Send local files to a specified S3 bucket/key.</li> <li>Use AWS credentials from environment variables or configuration files.</li> </ul>"},{"location":"draft/base_image/spec/#3-containerization","title":"3. Containerization","text":"<ul> <li>Base image: No limitations on what base image or runtime are imposed.</li> <li>Include scripts for validation, upload, and download.</li> <li>Expose scripts as executable commands in the container.</li> </ul>"},{"location":"draft/base_image/spec/#4-usage","title":"4. Usage","text":"<ul> <li>Entrypoint: Validation script (<code>validate</code>)</li> <li>Additional commands: <code>download</code>, <code>upload</code>, <code>download_from_config</code></li> </ul>"},{"location":"draft/base_image/spec/#5-dependencies","title":"5. Dependencies","text":"<ul> <li>System package: <code>jq</code></li> </ul>"},{"location":"draft/base_image/spec/#example-commands","title":"Example Commands","text":"<pre><code>docker run --rm -v $(pwd):/data validate /data/config.json /schemas/base_schema.json\ndocker run --rm upload s3://bucket/key /data/file.txt\ndocker run --rm download s3://bucket/key /data/file.txt\n</code></pre>"},{"location":"draft/base_image/standard/","title":"Base Image","text":""},{"location":"draft/base_image/standard/#standard","title":"\ud83d\udcd0 Standard","text":""},{"location":"draft/base_image/standard/#purpose","title":"Purpose","text":"<p>To ensure consistent validation of configuration files and seamless interoperability with Object Stores (starting with Amazon S3) for file upload and download operations.</p>"},{"location":"draft/base_image/standard/#scope","title":"Scope","text":"<p>This standard applies to all systems and projects that require:</p> <ul> <li>Validation of configuration files against a defined schema.</li> <li>Uploading and downloading files to/from Amazon S3.</li> <li>Use of Python-based reference implementations for these operations.</li> </ul>"},{"location":"draft/base_image/standard/#guidelines","title":"Guidelines","text":"<ol> <li>Schema Validation: All configuration files must be validated against a JSON schema before processing.</li> <li>S3 Operations: File uploads and downloads must use secure, authenticated connections to Amazon S3.</li> <li>Containerization: Reference implementations should be provided as container images for reproducibility.</li> <li>Interoperability: All tools must accept configuration files and schemas in standard JSON format.</li> <li>Documentation: Each implementation must include clear usage instructions and example commands.</li> </ol>"},{"location":"draft/base_image/standard/#best-practices","title":"Best Practices","text":"<ul> <li>Use environment variables for sensitive credentials.</li> <li>Log all validation and S3 operations for auditability.</li> <li>Follow semantic versioning for schema and implementation updates.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/","title":"HEC-HMS Simulation","text":""},{"location":"draft/hms_sim/hms_sim/#standard","title":"\ud83d\udcd0 Standard","text":""},{"location":"draft/hms_sim/hms_sim/#purpose","title":"Purpose","text":"<p>To provide a reproducible, containerized environment for running HEC-HMS hydrologic models and custom compute workflows.</p>"},{"location":"draft/hms_sim/hms_sim/#scope","title":"Scope","text":"<p>This standard applies to all workflows requiring:</p> <ul> <li>Automated execution of HEC-HMS models.</li> <li>Use of custom Java compute modules with HEC-HMS.</li> <li>Containerization for portability and consistency.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/#guidelines","title":"Guidelines","text":"<ol> <li>Containerization: All HEC-HMS binaries, libraries, and custom compute modules must be packaged in a container image.</li> <li>Automation: Model execution should be performed via a shell script (<code>run_hms.sh</code>).</li> <li>Reproducibility: The container must provide all dependencies for running HEC-HMS and custom Java modules.</li> <li>File Organization: Simulation files and results should be placed in <code>/data</code> or <code>/app</code>.</li> <li>Documentation: Usage instructions and example commands must be provided.</li> </ol>"},{"location":"draft/hms_sim/hms_sim/#best-practices","title":"Best Practices","text":"<ul> <li>Use official sources for HEC-HMS binaries.</li> <li>Include all required system libraries and dependencies.</li> <li>Log model execution steps for traceability.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/#specification","title":"\ud83d\udcdd Specification","text":""},{"location":"draft/hms_sim/hms_sim/#overview","title":"Overview","text":"<p>This specification describes requirements for a containerized environment to run HEC-HMS models and custom compute modules.</p>"},{"location":"draft/hms_sim/hms_sim/#requirements","title":"Requirements","text":""},{"location":"draft/hms_sim/hms_sim/#1-container-base","title":"1. Container Base","text":"<ul> <li>Use <code>gradle:7.3.1-jdk17</code> for building Java modules.</li> <li>Use <code>python:3.11-slim</code> for the production runtime.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/#2-hec-hms-installation","title":"2. HEC-HMS Installation","text":"<ul> <li>Download HEC-HMS Linux distribution from the official USACE website.</li> <li>Extract and install all required binaries and libraries.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/#3-custom-compute-module","title":"3. Custom Compute Module","text":"<ul> <li>Build a custom Java module (<code>hms-compute.jar</code>) using Gradle.</li> <li>Place the jar in <code>/HEC-HMS-4.11/lib</code>.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/#4-file-structure","title":"4. File Structure","text":"<ul> <li>HEC-HMS libraries: <code>/HEC-HMS-4.11/lib</code></li> <li>HEC-HMS executables: <code>/HEC-HMS-4.11</code></li> <li>Sample data: <code>/data</code></li> <li>Working directory: <code>/app</code></li> </ul>"},{"location":"draft/hms_sim/hms_sim/#5-execution","title":"5. Execution","text":"<ul> <li>Provide a shell script (<code>run_hms.sh</code>) to automate model execution.</li> <li>Set the container entrypoint to <code>/app/run_hms.sh</code>.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/#6-dependencies","title":"6. Dependencies","text":"<ul> <li>Install required system libraries: <code>libxrender1</code>, <code>libxtst6</code>, <code>libxi6</code>, <code>libfreetype6</code>, <code>libgfortran5</code>, <code>libfontconfig1</code>, <code>jq</code>, <code>unzip</code>.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/#7-schema","title":"7. Schema","text":"<ul> <li>Include a JSON schema (<code>hms_schema.json</code>) for validating model configuration files.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/#example-usage","title":"Example Usage","text":"<pre><code>docker run --rm -v $(pwd):/data hms-reference /app/run_hms.sh\n</code></pre> <p>This command runs the model using files mounted in <code>/data</code>.</p>"},{"location":"draft/hms_sim/hms_sim/#schema","title":"\ud83d\uddc3\ufe0f Schema","text":"<p>This page includes the complete configuration schema used by the HEC-HMS image to simulate hydrology.</p>"},{"location":"draft/hms_sim/hms_sim/#json-schema","title":"\ud83d\udd0d JSON Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://example.com/schemas/hms_schema.json\",\n  \"title\": \"HEC-HMS Execution Schema\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Configuration for running a HEC-HMS model using a project file.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"project_file\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"description\": \"Path to the HEC-HMS project file (.hms).\"\n    },\n    \"sim_name\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"description\": \"Name of the simulation within the HEC-HMS project to run.\"\n    },\n    \"excess_precip\": {\n      \"type\": \"string\",\n      \"description\": \"Optional path to export spatial excess precipitation results (RAS HDF or DSS format).\"\n    }\n  },\n  \"required\": [\n    \"project_file\",\n    \"sim_name\"\n  ],\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"draft/hms_sim/hms_sim/#notes","title":"\ud83e\uddfe Notes","text":""},{"location":"draft/hms_sim/hms_sim/#reference","title":"\ud83d\udcda Reference","text":"<p>This reference implementation provides a containerized environment for running HEC-HMS models and custom compute modules.</p>"},{"location":"draft/hms_sim/hms_sim/#container-details","title":"Container Details","text":"<ul> <li>Build Stage: Uses <code>gradle:7.3.1-jdk17</code> to build custom Java modules.</li> <li>Production Stage: Uses <code>python:3.11-slim</code> and installs required system libraries.</li> <li>HEC-HMS Binaries: Downloaded and extracted from the official USACE site.</li> <li>Custom Compute Module: Built as <code>hms-compute.jar</code> and placed in <code>/HEC-HMS-4.11/lib</code>.</li> <li>Sample Data: Unzipped to <code>/data</code> for testing and demonstration.</li> </ul>"},{"location":"draft/hms_sim/hms_sim/#usage","title":"Usage","text":""},{"location":"draft/hms_sim/hms_sim/#run-a-hec-hms-model","title":"Run a HEC-HMS Model","text":"<pre><code>docker run --rm -v $(pwd):/data hms-reference /app/run_hms.sh\n</code></pre> <p>This will execute <code>/app/run_hms.sh</code> inside the container, running the HEC-HMS model with files in <code>/data</code>.</p>"},{"location":"draft/hms_sim/hms_sim/#entrypoint","title":"Entrypoint","text":"<p>The default entrypoint is:</p> <pre><code>ENTRYPOINT [\"/app/run_hms.sh\"]\n</code></pre>"},{"location":"draft/hms_sim/hms_sim/#source-files","title":"Source Files","text":"<ul> <li><code>Dockerfile</code></li> <li><code>run_hms.sh</code></li> <li><code>hms_schema.json</code></li> <li>Custom Java sources (<code>src/</code>)</li> <li>Gradle build files (<code>build.gradle</code>, <code>gradlew</code>)</li> <li>HEC-HMS binaries and libraries (downloaded during build)</li> </ul> <p>See the Dockerfile for installation and setup details.</p>"},{"location":"draft/hms_sim/reference/","title":"Reference","text":""},{"location":"draft/hms_sim/reference/#reference","title":"\ud83d\udcda Reference","text":"<p>This reference implementation provides a containerized environment for running HEC-HMS models and custom compute modules.</p>"},{"location":"draft/hms_sim/reference/#container-details","title":"Container Details","text":"<ul> <li>Build Stage: Uses <code>gradle:7.3.1-jdk17</code> to build custom Java modules.</li> <li>Production Stage: Uses <code>python:3.11-slim</code> and installs required system libraries.</li> <li>HEC-HMS Binaries: Downloaded and extracted from the official USACE site.</li> <li>Custom Compute Module: Built as <code>hms-compute.jar</code> and placed in <code>/HEC-HMS-4.11/lib</code>.</li> <li>Sample Data: Unzipped to <code>/data</code> for testing and demonstration.</li> </ul>"},{"location":"draft/hms_sim/reference/#usage","title":"Usage","text":""},{"location":"draft/hms_sim/reference/#run-a-hec-hms-model","title":"Run a HEC-HMS Model","text":"<pre><code>docker run --rm -v $(pwd):/data hms-reference /app/run_hms.sh\n</code></pre> <p>This will execute <code>/app/run_hms.sh</code> inside the container, running the HEC-HMS model with files in <code>/data</code>.</p>"},{"location":"draft/hms_sim/reference/#entrypoint","title":"Entrypoint","text":"<p>The default entrypoint is:</p> <pre><code>ENTRYPOINT [\"/app/run_hms.sh\"]\n</code></pre>"},{"location":"draft/hms_sim/reference/#source-files","title":"Source Files","text":"<ul> <li><code>Dockerfile</code></li> <li><code>run_hms.sh</code></li> <li><code>hms_schema.json</code></li> <li>Custom Java sources (<code>src/</code>)</li> <li>Gradle build files (<code>build.gradle</code>, <code>gradlew</code>)</li> <li>HEC-HMS binaries and libraries (downloaded during build)</li> </ul> <p>See the Dockerfile for installation and setup details.</p>"},{"location":"draft/hms_sim/schema/","title":"Schema","text":""},{"location":"draft/hms_sim/schema/#schema","title":"\ud83d\uddc3\ufe0f Schema","text":"<p>This page includes the complete configuration schema used by the HEC-HMS image to simulate hydrology.</p>"},{"location":"draft/hms_sim/schema/#json-schema","title":"\ud83d\udd0d JSON Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://example.com/schemas/hms_schema.json\",\n  \"title\": \"HEC-HMS Execution Schema\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Configuration for running a HEC-HMS model using a project file.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"project_file\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"description\": \"Path to the HEC-HMS project file (.hms).\"\n    },\n    \"sim_name\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"description\": \"Name of the simulation within the HEC-HMS project to run.\"\n    },\n    \"excess_precip\": {\n      \"type\": \"string\",\n      \"description\": \"Optional path to export spatial excess precipitation results (RAS HDF or DSS format).\"\n    }\n  },\n  \"required\": [\n    \"project_file\",\n    \"sim_name\"\n  ],\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"draft/hms_sim/schema/#notes","title":"\ud83e\uddfe Notes","text":""},{"location":"draft/hms_sim/spec/","title":"Spec","text":""},{"location":"draft/hms_sim/spec/#specification","title":"\ud83d\udcdd Specification","text":""},{"location":"draft/hms_sim/spec/#overview","title":"Overview","text":"<p>This specification describes requirements for a containerized environment to run HEC-HMS models and custom compute modules.</p>"},{"location":"draft/hms_sim/spec/#requirements","title":"Requirements","text":""},{"location":"draft/hms_sim/spec/#1-container-base","title":"1. Container Base","text":"<ul> <li>Use <code>gradle:7.3.1-jdk17</code> for building Java modules.</li> <li>Use <code>python:3.11-slim</code> for the production runtime.</li> </ul>"},{"location":"draft/hms_sim/spec/#2-hec-hms-installation","title":"2. HEC-HMS Installation","text":"<ul> <li>Download HEC-HMS Linux distribution from the official USACE website.</li> <li>Extract and install all required binaries and libraries.</li> </ul>"},{"location":"draft/hms_sim/spec/#3-custom-compute-module","title":"3. Custom Compute Module","text":"<ul> <li>Build a custom Java module (<code>hms-compute.jar</code>) using Gradle.</li> <li>Place the jar in <code>/HEC-HMS-4.11/lib</code>.</li> </ul>"},{"location":"draft/hms_sim/spec/#4-file-structure","title":"4. File Structure","text":"<ul> <li>HEC-HMS libraries: <code>/HEC-HMS-4.11/lib</code></li> <li>HEC-HMS executables: <code>/HEC-HMS-4.11</code></li> <li>Sample data: <code>/data</code></li> <li>Working directory: <code>/app</code></li> </ul>"},{"location":"draft/hms_sim/spec/#5-execution","title":"5. Execution","text":"<ul> <li>Provide a shell script (<code>run_hms.sh</code>) to automate model execution.</li> <li>Set the container entrypoint to <code>/app/run_hms.sh</code>.</li> </ul>"},{"location":"draft/hms_sim/spec/#6-dependencies","title":"6. Dependencies","text":"<ul> <li>Install required system libraries: <code>libxrender1</code>, <code>libxtst6</code>, <code>libxi6</code>, <code>libfreetype6</code>, <code>libgfortran5</code>, <code>libfontconfig1</code>, <code>jq</code>, <code>unzip</code>.</li> </ul>"},{"location":"draft/hms_sim/spec/#7-schema","title":"7. Schema","text":"<ul> <li>Include a JSON schema (<code>hms_schema.json</code>) for validating model configuration files.</li> </ul>"},{"location":"draft/hms_sim/spec/#example-usage","title":"Example Usage","text":"<pre><code>docker run --rm -v $(pwd):/data hms-reference /app/run_hms.sh\n</code></pre> <p>This command runs the model using files mounted in <code>/data</code>.</p>"},{"location":"draft/hms_sim/standard/","title":"HEC-HMS Simulation","text":""},{"location":"draft/hms_sim/standard/#standard","title":"\ud83d\udcd0 Standard","text":""},{"location":"draft/hms_sim/standard/#purpose","title":"Purpose","text":"<p>To provide a reproducible, containerized environment for running HEC-HMS hydrologic models and custom compute workflows.</p>"},{"location":"draft/hms_sim/standard/#scope","title":"Scope","text":"<p>This standard applies to all workflows requiring:</p> <ul> <li>Automated execution of HEC-HMS models.</li> <li>Use of custom Java compute modules with HEC-HMS.</li> <li>Containerization for portability and consistency.</li> </ul>"},{"location":"draft/hms_sim/standard/#guidelines","title":"Guidelines","text":"<ol> <li>Containerization: All HEC-HMS binaries, libraries, and custom compute modules must be packaged in a container image.</li> <li>Automation: Model execution should be performed via a shell script (<code>run_hms.sh</code>).</li> <li>Reproducibility: The container must provide all dependencies for running HEC-HMS and custom Java modules.</li> <li>File Organization: Simulation files and results should be placed in <code>/data</code> or <code>/app</code>.</li> <li>Documentation: Usage instructions and example commands must be provided.</li> </ol>"},{"location":"draft/hms_sim/standard/#best-practices","title":"Best Practices","text":"<ul> <li>Use official sources for HEC-HMS binaries.</li> <li>Include all required system libraries and dependencies.</li> <li>Log model execution steps for traceability.</li> </ul>"},{"location":"draft/ras_sim/ras_sim/","title":"HEC-RAS Simulation","text":""},{"location":"draft/ras_sim/ras_sim/#standard","title":"\ud83d\udcd0 Standard","text":""},{"location":"draft/ras_sim/ras_sim/#purpose","title":"Purpose","text":"<p>To provide a consistent, reproducible environment for running HEC-RAS models on Linux using containerization.</p>"},{"location":"draft/ras_sim/ras_sim/#scope","title":"Scope","text":"<p>This standard applies to all workflows requiring automated execution of HEC-RAS models, including:</p> <ul> <li>Preparation of simulation environments.</li> <li>Execution of HEC-RAS binaries in a container.</li> <li>Use of Red Hat UBI base images for compatibility and security.</li> </ul>"},{"location":"draft/ras_sim/ras_sim/#guidelines","title":"Guidelines","text":"<ol> <li>Containerization: HEC-RAS binaries and required libraries must be packaged in a container image.</li> <li>Automation: Model execution should be automated via a shell script (<code>run-model.sh</code>).</li> <li>Reproducibility: The container must provide all dependencies for running HEC-RAS without manual setup.</li> <li>File Organization: Simulation files should be placed in <code>/sim</code> and results should be written there.</li> <li>Documentation: Usage instructions and example commands must be provided.</li> </ol>"},{"location":"draft/ras_sim/ras_sim/#best-practices","title":"Best Practices","text":"<ul> <li>Use official sources for HEC-RAS binaries.</li> <li>Ensure all required libraries are included.</li> <li>Log model execution steps for traceability.</li> </ul>"},{"location":"draft/ras_sim/ras_sim/#specification","title":"\ud83d\udcdd Specification","text":""},{"location":"draft/ras_sim/ras_sim/#overview","title":"Overview","text":"<p>This specification describes requirements for a containerized environment to run HEC-RAS models on Linux.</p>"},{"location":"draft/ras_sim/ras_sim/#requirements","title":"Requirements","text":""},{"location":"draft/ras_sim/ras_sim/#1-container-base","title":"1. Container Base","text":"<ul> <li>Use <code>registry.access.redhat.com/ubi8/ubi:8.5</code> as the base image.</li> </ul>"},{"location":"draft/ras_sim/ras_sim/#2-hec-ras-installation","title":"2. HEC-RAS Installation","text":"<ul> <li>Download HEC-RAS Linux distribution from the official USACE website.</li> <li>Unzip and install all required libraries and binaries.</li> </ul>"},{"location":"draft/ras_sim/ras_sim/#3-file-structure","title":"3. File Structure","text":"<ul> <li>Place HEC-RAS libraries in <code>/ras/libs</code>.</li> <li>Place HEC-RAS executables in <code>/ras/v61</code>.</li> <li>Create <code>/sim</code> directory for simulation files and results.</li> </ul>"},{"location":"draft/ras_sim/ras_sim/#4-execution","title":"4. Execution","text":"<ul> <li>Provide a shell script (<code>run-model.sh</code>) to automate model execution.</li> <li>Set the container entrypoint to <code>/sim/run-model.sh</code>.</li> </ul>"},{"location":"draft/ras_sim/ras_sim/#5-dependencies","title":"5. Dependencies","text":"<ul> <li>Install <code>jq</code> for potential JSON processing.</li> <li>Ensure all required system libraries are present.</li> </ul>"},{"location":"draft/ras_sim/ras_sim/#example-usage","title":"Example Usage","text":"<pre><code>docker run --rm -v $(pwd):/sim ras-reference\n</code></pre> <p>This command runs the model using files mounted in <code>/sim</code>.</p>"},{"location":"draft/ras_sim/ras_sim/#schema","title":"\ud83d\uddc3\ufe0f Schema","text":"<p>This page includes the complete configuration schema used by the HEC-RAS image to simulate hydraulics.</p>"},{"location":"draft/ras_sim/ras_sim/#json-schema","title":"\ud83d\udd0d JSON Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://example.com/schemas/ras_schema.json\",\n  \"title\": \"HEC-RAS Execution Schema\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Configuration for running a HEC-RAS model using a project file.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"program\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"ras\"\n      ]\n    },\n    \"model_directory\": {\n      \"type\": \"string\",\n      \"minLength\": 1\n    },\n    \"model_name\": {\n      \"type\": \"string\",\n      \"minLength\": 1\n    }\n  },\n  \"required\": [\n    \"model_directory\",\n    \"model_name\"\n  ],\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"draft/ras_sim/ras_sim/#notes","title":"\ud83e\uddfe Notes","text":""},{"location":"draft/ras_sim/ras_sim/#reference","title":"\ud83d\udcda Reference","text":"<p>This reference implementation provides a containerized environment for running HEC-RAS models on Linux.</p>"},{"location":"draft/ras_sim/ras_sim/#container-details","title":"Container Details","text":"<ul> <li>Base Image: <code>registry.access.redhat.com/ubi8/ubi:8.5</code></li> <li>Installed Tools: <code>wget</code>, <code>unzip</code>, <code>jq</code></li> <li>HEC-RAS Binaries: Downloaded and extracted from the official USACE site.</li> <li>File Structure:</li> <li><code>/ras/libs</code>: HEC-RAS libraries</li> <li><code>/ras/v61</code>: HEC-RAS executables</li> <li><code>/sim</code>: Working directory for simulation files and results</li> </ul>"},{"location":"draft/ras_sim/ras_sim/#usage","title":"Usage","text":""},{"location":"draft/ras_sim/ras_sim/#run-a-hec-ras-model","title":"Run a HEC-RAS Model","text":"<pre><code>docker run --rm -v $(pwd):/sim ras-reference\n</code></pre> <p>This will execute <code>/sim/run-model.sh</code> inside the container, running the HEC-RAS model with files in <code>/sim</code>.</p>"},{"location":"draft/ras_sim/ras_sim/#entrypoint","title":"Entrypoint","text":"<p>The default entrypoint is:</p> <pre><code>ENTRYPOINT [\"/sim/run-model.sh\"]\n</code></pre>"},{"location":"draft/ras_sim/ras_sim/#source-files","title":"Source Files","text":"<ul> <li><code>Dockerfile</code></li> <li><code>run-model.sh</code></li> <li>HEC-RAS binaries and libraries (downloaded during build)</li> </ul> <p>See the Dockerfile for installation and setup details.</p>"},{"location":"draft/ras_sim/reference/","title":"Reference","text":""},{"location":"draft/ras_sim/reference/#reference","title":"\ud83d\udcda Reference","text":"<p>This reference implementation provides a containerized environment for running HEC-RAS models on Linux.</p>"},{"location":"draft/ras_sim/reference/#container-details","title":"Container Details","text":"<ul> <li>Base Image: <code>registry.access.redhat.com/ubi8/ubi:8.5</code></li> <li>Installed Tools: <code>wget</code>, <code>unzip</code>, <code>jq</code></li> <li>HEC-RAS Binaries: Downloaded and extracted from the official USACE site.</li> <li>File Structure:</li> <li><code>/ras/libs</code>: HEC-RAS libraries</li> <li><code>/ras/v61</code>: HEC-RAS executables</li> <li><code>/sim</code>: Working directory for simulation files and results</li> </ul>"},{"location":"draft/ras_sim/reference/#usage","title":"Usage","text":""},{"location":"draft/ras_sim/reference/#run-a-hec-ras-model","title":"Run a HEC-RAS Model","text":"<pre><code>docker run --rm -v $(pwd):/sim ras-reference\n</code></pre> <p>This will execute <code>/sim/run-model.sh</code> inside the container, running the HEC-RAS model with files in <code>/sim</code>.</p>"},{"location":"draft/ras_sim/reference/#entrypoint","title":"Entrypoint","text":"<p>The default entrypoint is:</p> <pre><code>ENTRYPOINT [\"/sim/run-model.sh\"]\n</code></pre>"},{"location":"draft/ras_sim/reference/#source-files","title":"Source Files","text":"<ul> <li><code>Dockerfile</code></li> <li><code>run-model.sh</code></li> <li>HEC-RAS binaries and libraries (downloaded during build)</li> </ul> <p>See the Dockerfile for installation and setup details.</p>"},{"location":"draft/ras_sim/schema/","title":"Schema","text":""},{"location":"draft/ras_sim/schema/#schema","title":"\ud83d\uddc3\ufe0f Schema","text":"<p>This page includes the complete configuration schema used by the HEC-RAS image to simulate hydraulics.</p>"},{"location":"draft/ras_sim/schema/#json-schema","title":"\ud83d\udd0d JSON Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://example.com/schemas/ras_schema.json\",\n  \"title\": \"HEC-RAS Execution Schema\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Configuration for running a HEC-RAS model using a project file.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"program\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"ras\"\n      ]\n    },\n    \"model_directory\": {\n      \"type\": \"string\",\n      \"minLength\": 1\n    },\n    \"model_name\": {\n      \"type\": \"string\",\n      \"minLength\": 1\n    }\n  },\n  \"required\": [\n    \"model_directory\",\n    \"model_name\"\n  ],\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"draft/ras_sim/schema/#notes","title":"\ud83e\uddfe Notes","text":""},{"location":"draft/ras_sim/spec/","title":"Spec","text":""},{"location":"draft/ras_sim/spec/#specification","title":"\ud83d\udcdd Specification","text":""},{"location":"draft/ras_sim/spec/#overview","title":"Overview","text":"<p>This specification describes requirements for a containerized environment to run HEC-RAS models on Linux.</p>"},{"location":"draft/ras_sim/spec/#requirements","title":"Requirements","text":""},{"location":"draft/ras_sim/spec/#1-container-base","title":"1. Container Base","text":"<ul> <li>Use <code>registry.access.redhat.com/ubi8/ubi:8.5</code> as the base image.</li> </ul>"},{"location":"draft/ras_sim/spec/#2-hec-ras-installation","title":"2. HEC-RAS Installation","text":"<ul> <li>Download HEC-RAS Linux distribution from the official USACE website.</li> <li>Unzip and install all required libraries and binaries.</li> </ul>"},{"location":"draft/ras_sim/spec/#3-file-structure","title":"3. File Structure","text":"<ul> <li>Place HEC-RAS libraries in <code>/ras/libs</code>.</li> <li>Place HEC-RAS executables in <code>/ras/v61</code>.</li> <li>Create <code>/sim</code> directory for simulation files and results.</li> </ul>"},{"location":"draft/ras_sim/spec/#4-execution","title":"4. Execution","text":"<ul> <li>Provide a shell script (<code>run-model.sh</code>) to automate model execution.</li> <li>Set the container entrypoint to <code>/sim/run-model.sh</code>.</li> </ul>"},{"location":"draft/ras_sim/spec/#5-dependencies","title":"5. Dependencies","text":"<ul> <li>Install <code>jq</code> for potential JSON processing.</li> <li>Ensure all required system libraries are present.</li> </ul>"},{"location":"draft/ras_sim/spec/#example-usage","title":"Example Usage","text":"<pre><code>docker run --rm -v $(pwd):/sim ras-reference\n</code></pre> <p>This command runs the model using files mounted in <code>/sim</code>.</p>"},{"location":"draft/ras_sim/standard/","title":"HEC-RAS Simulation","text":""},{"location":"draft/ras_sim/standard/#standard","title":"\ud83d\udcd0 Standard","text":""},{"location":"draft/ras_sim/standard/#purpose","title":"Purpose","text":"<p>To provide a consistent, reproducible environment for running HEC-RAS models on Linux using containerization.</p>"},{"location":"draft/ras_sim/standard/#scope","title":"Scope","text":"<p>This standard applies to all workflows requiring automated execution of HEC-RAS models, including:</p> <ul> <li>Preparation of simulation environments.</li> <li>Execution of HEC-RAS binaries in a container.</li> <li>Use of Red Hat UBI base images for compatibility and security.</li> </ul>"},{"location":"draft/ras_sim/standard/#guidelines","title":"Guidelines","text":"<ol> <li>Containerization: HEC-RAS binaries and required libraries must be packaged in a container image.</li> <li>Automation: Model execution should be automated via a shell script (<code>run-model.sh</code>).</li> <li>Reproducibility: The container must provide all dependencies for running HEC-RAS without manual setup.</li> <li>File Organization: Simulation files should be placed in <code>/sim</code> and results should be written there.</li> <li>Documentation: Usage instructions and example commands must be provided.</li> </ol>"},{"location":"draft/ras_sim/standard/#best-practices","title":"Best Practices","text":"<ul> <li>Use official sources for HEC-RAS binaries.</li> <li>Ensure all required libraries are included.</li> <li>Log model execution steps for traceability.</li> </ul>"},{"location":"proposals/logging/","title":"Logging","text":""},{"location":"proposals/logging/#standard","title":"\ud83d\udcd0 Standard","text":""},{"location":"proposals/logging/#overview","title":"Overview","text":"<p>This specification describes logging requirements for all FFRD containers, ensuring that logs are consistent, useful, and compatible with modern workflows.</p>"},{"location":"proposals/logging/#specification","title":"\ud83d\udcdd Specification","text":""},{"location":"proposals/logging/#1-re-emit-stdoutstderr","title":"1. Re-emit <code>stdout</code>/<code>stderr</code>","text":"<p>Containers must re-emit messages logged to <code>stdout</code>/<code>stderr</code> by the main process.</p> <p>In some cases, the container may filter or aggregate superflous logs to <code>stdout</code>/<code>stderr</code>. For example, the HEC-RAS 6.x Unsteady process is extremely \"chatty\", indicating its progress by echoing each individual timestep to <code>stdout</code>/<code>stderr</code>. Logs from a HEC-RAS 6.x container will be more legible if messages from the Unsteady process are filtered to increments of, e.g., 1%, 5%, or 10% progress.</p>"},{"location":"proposals/logging/#2-tail-and-echo-relevant-log-files","title":"2. Tail and echo relevant log files","text":"<p>Containers must tail and re-emit messages logged to log files by the main process.</p> <p>For example, in HEC-HMS v4.x, logs are saved in <code>*.log</code> and <code>*.out</code> files within the directory of a project. A HEC-HMS v4.x container should echo messages saved to these files while a HEC-HMS model runs.</p>"},{"location":"proposals/logging/#3-log-message-formatting","title":"3. Log message formatting","text":"<p>Containers must write log messages in a format which includes:</p> <ol> <li>ISO timestamp</li> <li>Level (e.g., <code>ERROR</code>, <code>WARNING</code>, <code>INFO</code>)</li> <li>Path to the log file where the log message was written (not applicable to messages written to <code>stdout</code>/<code>stderr</code>)</li> <li>The original log message</li> </ol> <p>Example:</p> <pre><code>2025-08-04 20:12:32,958 - INFO - /app/HEC-HMS-4.12/samples/tenk/tenk.log - NOTE 10181:  Opened control specifications \"Jan 96\" at time 04Aug2025, 20:12:32.\n2025-08-04 20:12:32,958 - INFO - /app/HEC-HMS-4.12/samples/tenk/tenk.log - NOTE 10616:  Data type \"PER-AVER\" is usually used for time intervals of 24 hours or longer.  Gage \"TENK\".\n2025-08-04 20:12:32,959 - WARNING - /app/HEC-HMS-4.12/samples/tenk/tenk.log - WARNING 40503:  Missing precipitation set to zero for 129 of 129 grid cells at 18Jan1996, 17:00 for gridded subbasin \"86\".\n2025-08-04 20:12:32,959 - WARNING - /app/HEC-HMS-4.12/samples/tenk/tenk.log - WARNING 40503:  Missing precipitation set to zero for 84 of 84 grid cells at 18Jan1996, 17:00 for gridded subbasin \"85\".\n2025-08-04 20:12:32,959 - WARNING - /app/HEC-HMS-4.12/samples/tenk/tenk.log - WARNING 40503:  Missing precipitation set to zero for 78 of 78 grid cells at 18Jan1996, 17:00 for gridded subbasin \"113\".\n2025-08-04 20:12:32,958 - INFO - /app/HEC-HMS-4.12/samples/tenk/Jan_96_storm.log - grid cells at 20Jan1996, 02:00 for gridded subbasin \"127\".\n</code></pre>"},{"location":"proposals/logging/#4-json-log-message-formatting","title":"4. JSON log message formatting","text":"<p>Containers must provide an option to emit log messages as JSON. JSON-formatted logs are valuable in modern logging pipelines because they can be easily parsed, indexed, and queried by log aggregation systems. This enables filtering by timestamp, severity level, model component, and file source, allowing teams to detect issues faster and build dashboards or alerting mechanisms.</p> <p>JSON log messages must abide by the following schema:</p> <pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://example.com/logs-schema.json\",\n  \"title\": \"FFRD Log Format\",\n  \"description\": \"Schema for the FFRD log format\",\n  \"version\": \"0.1.0\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"timestamp\": {\n      \"description\": \"The timestamp of the log entry\",\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"level\": {\n      \"description\": \"The log level\",\n      \"type\": \"string\",\n      \"enum\": [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]\n    },\n    \"source\": {\n      \"description\": \"The source of the log entry; e.g., the file path to the log file. This can be null if the log entry is not associated with a specific file.\",\n      \"type\": [\"string\", \"null\"]\n    },\n    \"message\": {\n      \"description\": \"The log message\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [ \"timestamp\", \"level\", \"source\", \"message\" ]\n}\n</code></pre> <p>Example:</p> <pre><code>{\"timestamp\": \"2025-08-04T20:20:40.141323\", \"level\": \"WARNING\", \"source\": \"/app/HEC-HMS-4.12/samples/tenk/Jan_96_storm.log\", \"message\": \"WARNING 40503:  Missing precipitation set to zero for 86 of 86 grid cells at 20Jan1996, 22:00 for gridded subbasin \\\"127\\\".\"}\n{\"timestamp\": \"2025-08-04T20:20:40.141370\", \"level\": \"INFO\", \"source\": \"/app/HEC-HMS-4.12/samples/tenk/Jan_96_storm.log\", \"message\": \"NOTE 15302:  Finished computing simulation run \\\"Jan 96 storm\\\" at time 04Aug2025, 20:20:39.\"}\n{\"timestamp\": \"2025-08-04T20:20:40.141409\", \"level\": \"INFO\", \"source\": \"/app/HEC-HMS-4.12/samples/tenk/Jan_96_storm.log\", \"message\": \"NOTE 15312:  The total runtime for this simulation is 00:01.\"}\n</code></pre>"},{"location":"proposals/logging/#5-return-codes","title":"5. Return codes","text":"<p>Containers must exit with clear return codes indicating the success or failure of the primary process. This enables automation and orchestration systems to make informed decisions -- such as whether to retry a failed job, trigger a downstream task, or alert a human operator.</p> <ul> <li><code>0</code>: Success</li> <li><code>1</code>: Failure</li> </ul>"},{"location":"proposals/conformance/conformance/","title":"Conformance Test Container","text":""},{"location":"proposals/conformance/conformance/#standard","title":"\ud83d\udcd0 Standard","text":""},{"location":"proposals/conformance/conformance/#overview","title":"Overview","text":"<p>This specification describes requirements for a containerized environment to run a conformance test, which performs the following operations:</p> <ol> <li>Validate configuration inputs using published schemas</li> <li>Download required files</li> <li>Simulate HEC-HMS</li> <li>Simulate HEC-RAS models (in sequence)</li> <li>Upload required outputs</li> </ol>"},{"location":"proposals/conformance/conformance/#requirements","title":"Requirements","text":""},{"location":"proposals/conformance/conformance/#1-container-base","title":"1. Container Base","text":"<ul> <li>Use upstream containers (<code>hms-ffrd</code>, <code>ras-ffrd</code>, <code>ffrd_base</code>) for model artifacts and base environment.</li> </ul>"},{"location":"proposals/conformance/conformance/#2-model-artifacts","title":"2. Model Artifacts","text":"<ul> <li>Copy HEC-HMS binaries, libraries, and compute jar from <code>hms-ffrd</code>.</li> <li>Copy HEC-RAS binaries and libraries from <code>ras-ffrd</code>.</li> <li>Include execution scripts for both models (<code>run_hms.sh</code>, <code>run-model.sh</code>).</li> </ul>"},{"location":"proposals/conformance/conformance/#3-schema-validation","title":"3. Schema Validation","text":"<ul> <li>Include JSON schemas for HMS and RAS (<code>hms_schema.json</code>, <code>ras_schema.json</code>).</li> <li>Validate configuration files against these schemas before execution.</li> </ul>"},{"location":"proposals/conformance/conformance/#4-environment-management","title":"4. Environment Management","text":"<ul> <li>Load environment variables from <code>.env.runtime</code> at container startup.</li> </ul>"},{"location":"proposals/conformance/conformance/#5-execution","title":"5. Execution","text":"<ul> <li>Provide a unified entrypoint script (<code>entrypoint_conformance.sh</code>) to manage model selection and execution.</li> <li>Expose RAS model runner as <code>/usr/local/bin/run-ras-model</code>.</li> </ul>"},{"location":"proposals/conformance/conformance/#6-dependencies","title":"6. Dependencies","text":"<ul> <li>Install required system libraries: <code>wget</code>, <code>unzip</code>, <code>libxrender1</code>, <code>libxtst6</code>, <code>libxi6</code>, <code>libfreetype6</code>, <code>libgfortran5</code>, <code>libfontconfig1</code>.</li> </ul>"},{"location":"proposals/conformance/conformance/#example-usage","title":"Example Usage","text":"<pre><code>docker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model hms --config /data/hms_config.json\ndocker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model ras --config /data/ras_config.json\n</code></pre>"},{"location":"proposals/conformance/conformance/#specification","title":"\ud83d\udcdd Specification","text":""},{"location":"proposals/conformance/conformance/#overview_1","title":"Overview","text":"<p>This specification describes requirements for a containerized environment to run both HEC-HMS and HEC-RAS models, with schema validation and environment management.</p>"},{"location":"proposals/conformance/conformance/#requirements_1","title":"Requirements","text":""},{"location":"proposals/conformance/conformance/#1-container-base_1","title":"1. Container Base","text":"<ul> <li>Use upstream containers (<code>hms-ffrd</code>, <code>ras-ffrd</code>, <code>ffrd_base</code>) for model artifacts and base environment.</li> </ul>"},{"location":"proposals/conformance/conformance/#2-model-artifacts_1","title":"2. Model Artifacts","text":"<ul> <li>Copy HEC-HMS binaries, libraries, and compute jar from <code>hms-ffrd</code>.</li> <li>Copy HEC-RAS binaries and libraries from <code>ras-ffrd</code>.</li> <li>Include execution scripts for both models (<code>run_hms.sh</code>, <code>run-model.sh</code>).</li> </ul>"},{"location":"proposals/conformance/conformance/#3-schema-validation_1","title":"3. Schema Validation","text":"<ul> <li>Include JSON schemas for HMS and RAS (<code>hms_schema.json</code>, <code>ras_schema.json</code>).</li> <li>Validate configuration files against these schemas before execution.</li> </ul>"},{"location":"proposals/conformance/conformance/#4-environment-management_1","title":"4. Environment Management","text":"<ul> <li>Load environment variables from <code>.env.runtime</code> at container startup.</li> </ul>"},{"location":"proposals/conformance/conformance/#5-execution_1","title":"5. Execution","text":"<ul> <li>Provide a unified entrypoint script (<code>entrypoint_conformance.sh</code>) to manage model selection and execution.</li> <li>Expose RAS model runner as <code>/usr/local/bin/run-ras-model</code>.</li> </ul>"},{"location":"proposals/conformance/conformance/#6-dependencies_1","title":"6. Dependencies","text":"<ul> <li>Install required system libraries: <code>wget</code>, <code>unzip</code>, <code>libxrender1</code>, <code>libxtst6</code>, <code>libxi6</code>, <code>libfreetype6</code>, <code>libgfortran5</code>, <code>libfontconfig1</code>.</li> </ul>"},{"location":"proposals/conformance/conformance/#example-usage_1","title":"Example Usage","text":"<pre><code>docker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model hms --config /data/hms_config.json\ndocker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model ras --config /data/ras_config.json\n</code></pre>"},{"location":"proposals/conformance/conformance/#schema","title":"\ud83d\uddc3\ufe0f Schema","text":"<p>This page includes the proposed configuration schema used by the conformance image to run all models in a single comformance compute.</p>"},{"location":"proposals/conformance/conformance/#json-schema","title":"\ud83d\udd0d JSON Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://example.com/schemas/conformance_schema.json\",\n  \"title\": \"Conformance Execution Schema\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Configuration for running conformance workflows with HEC-HMS, HEC-RAS, and base operations.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"hms_schema\": {\n      \"$ref\": \"https://example.com/schemas/hms_schema.json\"\n    },\n    \"ras_schema\": {\n      \"$ref\": \"https://example.com/schemas/ras_schema.json\"\n    },\n    \"base_schema\": {\n      \"$ref\": \"https://example.com/schemas/base_schema.json\"\n    }\n  },\n  \"required\": [\n    \"hms_schema\",\n    \"ras_schema\",\n    \"base_schema\"\n  ],\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"proposals/conformance/conformance/#notes","title":"\ud83e\uddfe Notes","text":""},{"location":"proposals/conformance/conformance/#reference","title":"\ud83d\udcda Reference","text":"<p>This reference implementation provides a containerized environment for running both HEC-HMS and HEC-RAS models with schema validation and environment management.</p>"},{"location":"proposals/conformance/conformance/#container-details","title":"Container Details","text":"<ul> <li>Upstream Artifacts: Uses <code>hms-ffrd</code> and <code>ras-ffrd</code> containers to source model binaries, libraries, and scripts.</li> <li>Base Image: Uses <code>ffrd_base</code> for the final runtime environment.</li> <li>Schema Validation: Includes <code>hms_schema.json</code> and <code>ras_schema.json</code> for validating model configuration files.</li> <li>Environment Management: Loads environment variables from <code>.env.runtime</code> at startup.</li> <li>Entrypoint: Uses <code>/usr/local/bin/entrypoint_conformance.sh</code> to select and run the appropriate model.</li> </ul>"},{"location":"proposals/conformance/conformance/#usage","title":"Usage","text":""},{"location":"proposals/conformance/conformance/#run-hec-hms-model","title":"Run HEC-HMS Model","text":"<pre><code>docker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model hms --config /data/hms_config.json\n</code></pre>"},{"location":"proposals/conformance/conformance/#run-hec-ras-model","title":"Run HEC-RAS Model","text":"<pre><code>docker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model ras --config /data/ras_config.json\n</code></pre>"},{"location":"proposals/conformance/conformance/#entrypoint","title":"Entrypoint","text":"<p>The default entrypoint is:</p> <pre><code>ENTRYPOINT [\"/usr/local/bin/entrypoint_conformance.sh\"]\n</code></pre>"},{"location":"proposals/conformance/conformance/#source-files","title":"Source Files","text":"<ul> <li><code>Dockerfile</code></li> <li><code>entrypoint_conformance.sh</code></li> <li><code>run_hms.sh</code></li> <li><code>run-model.sh</code></li> <li><code>hms_schema.json</code></li> <li><code>ras_schema.json</code></li> <li><code>.env.runtime</code></li> </ul> <p>See the Dockerfile for installation and setup details.</p>"},{"location":"proposals/conformance/reference/","title":"Reference","text":""},{"location":"proposals/conformance/reference/#reference","title":"\ud83d\udcda Reference","text":"<p>This reference implementation provides a containerized environment for running both HEC-HMS and HEC-RAS models with schema validation and environment management.</p>"},{"location":"proposals/conformance/reference/#container-details","title":"Container Details","text":"<ul> <li>Upstream Artifacts: Uses <code>hms-ffrd</code> and <code>ras-ffrd</code> containers to source model binaries, libraries, and scripts.</li> <li>Base Image: Uses <code>ffrd_base</code> for the final runtime environment.</li> <li>Schema Validation: Includes <code>hms_schema.json</code> and <code>ras_schema.json</code> for validating model configuration files.</li> <li>Environment Management: Loads environment variables from <code>.env.runtime</code> at startup.</li> <li>Entrypoint: Uses <code>/usr/local/bin/entrypoint_conformance.sh</code> to select and run the appropriate model.</li> </ul>"},{"location":"proposals/conformance/reference/#usage","title":"Usage","text":""},{"location":"proposals/conformance/reference/#run-hec-hms-model","title":"Run HEC-HMS Model","text":"<pre><code>docker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model hms --config /data/hms_config.json\n</code></pre>"},{"location":"proposals/conformance/reference/#run-hec-ras-model","title":"Run HEC-RAS Model","text":"<pre><code>docker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model ras --config /data/ras_config.json\n</code></pre>"},{"location":"proposals/conformance/reference/#entrypoint","title":"Entrypoint","text":"<p>The default entrypoint is:</p> <pre><code>ENTRYPOINT [\"/usr/local/bin/entrypoint_conformance.sh\"]\n</code></pre>"},{"location":"proposals/conformance/reference/#source-files","title":"Source Files","text":"<ul> <li><code>Dockerfile</code></li> <li><code>entrypoint_conformance.sh</code></li> <li><code>run_hms.sh</code></li> <li><code>run-model.sh</code></li> <li><code>hms_schema.json</code></li> <li><code>ras_schema.json</code></li> <li><code>.env.runtime</code></li> </ul> <p>See the Dockerfile for installation and setup details.</p>"},{"location":"proposals/conformance/schema/","title":"Schema","text":""},{"location":"proposals/conformance/schema/#schema","title":"\ud83d\uddc3\ufe0f Schema","text":"<p>This page includes the proposed configuration schema used by the conformance image to run all models in a single comformance compute.</p>"},{"location":"proposals/conformance/schema/#json-schema","title":"\ud83d\udd0d JSON Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://example.com/schemas/conformance_schema.json\",\n  \"title\": \"Conformance Execution Schema\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Configuration for running conformance workflows with HEC-HMS, HEC-RAS, and base operations.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"hms_schema\": {\n      \"$ref\": \"https://example.com/schemas/hms_schema.json\"\n    },\n    \"ras_schema\": {\n      \"$ref\": \"https://example.com/schemas/ras_schema.json\"\n    },\n    \"base_schema\": {\n      \"$ref\": \"https://example.com/schemas/base_schema.json\"\n    }\n  },\n  \"required\": [\n    \"hms_schema\",\n    \"ras_schema\",\n    \"base_schema\"\n  ],\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"proposals/conformance/schema/#notes","title":"\ud83e\uddfe Notes","text":""},{"location":"proposals/conformance/spec/","title":"Spec","text":""},{"location":"proposals/conformance/spec/#specification","title":"\ud83d\udcdd Specification","text":""},{"location":"proposals/conformance/spec/#overview","title":"Overview","text":"<p>This specification describes requirements for a containerized environment to run both HEC-HMS and HEC-RAS models, with schema validation and environment management.</p>"},{"location":"proposals/conformance/spec/#requirements","title":"Requirements","text":""},{"location":"proposals/conformance/spec/#1-container-base","title":"1. Container Base","text":"<ul> <li>Use upstream containers (<code>hms-ffrd</code>, <code>ras-ffrd</code>, <code>ffrd_base</code>) for model artifacts and base environment.</li> </ul>"},{"location":"proposals/conformance/spec/#2-model-artifacts","title":"2. Model Artifacts","text":"<ul> <li>Copy HEC-HMS binaries, libraries, and compute jar from <code>hms-ffrd</code>.</li> <li>Copy HEC-RAS binaries and libraries from <code>ras-ffrd</code>.</li> <li>Include execution scripts for both models (<code>run_hms.sh</code>, <code>run-model.sh</code>).</li> </ul>"},{"location":"proposals/conformance/spec/#3-schema-validation","title":"3. Schema Validation","text":"<ul> <li>Include JSON schemas for HMS and RAS (<code>hms_schema.json</code>, <code>ras_schema.json</code>).</li> <li>Validate configuration files against these schemas before execution.</li> </ul>"},{"location":"proposals/conformance/spec/#4-environment-management","title":"4. Environment Management","text":"<ul> <li>Load environment variables from <code>.env.runtime</code> at container startup.</li> </ul>"},{"location":"proposals/conformance/spec/#5-execution","title":"5. Execution","text":"<ul> <li>Provide a unified entrypoint script (<code>entrypoint_conformance.sh</code>) to manage model selection and execution.</li> <li>Expose RAS model runner as <code>/usr/local/bin/run-ras-model</code>.</li> </ul>"},{"location":"proposals/conformance/spec/#6-dependencies","title":"6. Dependencies","text":"<ul> <li>Install required system libraries: <code>wget</code>, <code>unzip</code>, <code>libxrender1</code>, <code>libxtst6</code>, <code>libxi6</code>, <code>libfreetype6</code>, <code>libgfortran5</code>, <code>libfontconfig1</code>.</li> </ul>"},{"location":"proposals/conformance/spec/#example-usage","title":"Example Usage","text":"<pre><code>docker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model hms --config /data/hms_config.json\ndocker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model ras --config /data/ras_config.json\n</code></pre>"},{"location":"proposals/conformance/standard/","title":"Conformance Test Container","text":""},{"location":"proposals/conformance/standard/#standard","title":"\ud83d\udcd0 Standard","text":""},{"location":"proposals/conformance/standard/#overview","title":"Overview","text":"<p>This specification describes requirements for a containerized environment to run a conformance test, which performs the following operations:</p> <ol> <li>Validate configuration inputs using published schemas</li> <li>Download required files</li> <li>Simulate HEC-HMS</li> <li>Simulate HEC-RAS models (in sequence)</li> <li>Upload required outputs</li> </ol>"},{"location":"proposals/conformance/standard/#requirements","title":"Requirements","text":""},{"location":"proposals/conformance/standard/#1-container-base","title":"1. Container Base","text":"<ul> <li>Use upstream containers (<code>hms-ffrd</code>, <code>ras-ffrd</code>, <code>ffrd_base</code>) for model artifacts and base environment.</li> </ul>"},{"location":"proposals/conformance/standard/#2-model-artifacts","title":"2. Model Artifacts","text":"<ul> <li>Copy HEC-HMS binaries, libraries, and compute jar from <code>hms-ffrd</code>.</li> <li>Copy HEC-RAS binaries and libraries from <code>ras-ffrd</code>.</li> <li>Include execution scripts for both models (<code>run_hms.sh</code>, <code>run-model.sh</code>).</li> </ul>"},{"location":"proposals/conformance/standard/#3-schema-validation","title":"3. Schema Validation","text":"<ul> <li>Include JSON schemas for HMS and RAS (<code>hms_schema.json</code>, <code>ras_schema.json</code>).</li> <li>Validate configuration files against these schemas before execution.</li> </ul>"},{"location":"proposals/conformance/standard/#4-environment-management","title":"4. Environment Management","text":"<ul> <li>Load environment variables from <code>.env.runtime</code> at container startup.</li> </ul>"},{"location":"proposals/conformance/standard/#5-execution","title":"5. Execution","text":"<ul> <li>Provide a unified entrypoint script (<code>entrypoint_conformance.sh</code>) to manage model selection and execution.</li> <li>Expose RAS model runner as <code>/usr/local/bin/run-ras-model</code>.</li> </ul>"},{"location":"proposals/conformance/standard/#6-dependencies","title":"6. Dependencies","text":"<ul> <li>Install required system libraries: <code>wget</code>, <code>unzip</code>, <code>libxrender1</code>, <code>libxtst6</code>, <code>libxi6</code>, <code>libfreetype6</code>, <code>libgfortran5</code>, <code>libfontconfig1</code>.</li> </ul>"},{"location":"proposals/conformance/standard/#example-usage","title":"Example Usage","text":"<pre><code>docker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model hms --config /data/hms_config.json\ndocker run --rm -v $(pwd):/data conformance-reference /usr/local/bin/entrypoint_conformance.sh --model ras --config /data/ras_config.json\n</code></pre>"}]}