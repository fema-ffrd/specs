{
  "$id": "./workflow.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Orchestration Workflow",
  "description": "Schema for defining a workflow with DAG tasks, shared volumes, and task inputs",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "workflow_name",
    "tasks",
    "volumes"
  ],
  "properties": {
    "workflow_name": {
      "type": "string",
      "description": "Name prefix for the workflow"
    },
    "entrypoint": {
      "type": "string",
      "description": "Name of the entrypoint template",
      "default": "main"
    },
    "volumes": {
      "type": "array",
      "description": "Shared volume configurations for the workflow",
      "items": {
        "$ref": "#/$defs/Volume"
      },
      "minItems": 1
    },
    "tasks": {
      "type": "array",
      "description": "List of tasks to execute in the workflow",
      "items": {
        "$ref": "#/$defs/Task"
      },
      "minItems": 1
    }
  },
  "$defs": {
    "Volume": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "size"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the volume"
        },
        "size": {
          "type": "string",
          "description": "Size of the volume (e.g., '5Gi', '10Gi')",
          "pattern": "^[0-9]+(Gi|Mi|Ti)$"
        },
        "access_mode": {
          "type": "string",
          "description": "Access mode for the volume",
          "enum": ["ReadWriteOnce", "ReadOnlyMany", "ReadWriteMany"],
          "default": "ReadWriteOnce"
        },
        "mount_path": {
          "type": "string",
          "description": "Path where the volume should be mounted in containers",
          "default": "/work"
        }
      }
    },
    "Task": {
      "type": "object",
      "required": [
        "name",
        "config",
        "image"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name for this task in the DAG"
        },
        "config": {
          "type": "object",
          "description": "Task configuration"
        },
        "dependencies": {
          "type": "array",
          "description": "List of task names that must complete before this task starts",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "image": {
          "type": "string",
          "description": "Container image to use for this task"
        },
        "volume_mounts": {
          "type": "array",
          "description": "List of volume names to mount for this task",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "type": "array",
          "description": "Environment variables for this task",
          "items": {
            "type": "object",
            "required": ["name", "value"],
            "properties": {
              "name": {
                "type": "string",
                "description": "Environment variable name"
              },
              "value": {
                "type": "string",
                "description": "Environment variable value"
              }
            }
          }
        }
      },
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "image": {
                "pattern": "^hms-golang"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$ref": "./action.hms.run_simulation.json"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "image": {
                "pattern": "^ras_v660"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$ref": "./action.ras.run_unsteady_simulation.json"
              }
            }
          }
        }
      ]
    }
  }
}
